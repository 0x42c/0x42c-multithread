; 0x42c-kernel memory.dasm
; April 24th, 2012
; Licensed with the MIT license.
; Contains subroutines for memory management.

; void kernel_format_userspace()
kernel_format_userspace:
    SET [userspace_memory], -1
    SET [userspace_memory + 1], 0xDFFD; userspace_memory_end - userspace_memory - 3 ; TODO: Organic bug here?
    SET [userspace_memory_end], userspace_memory
    SET PC, POP

; uint16* alloc_mem(size)
alloc_mem:
    SET B, userspace_memory
    ; Search for a free section that is large enough
.loop:
    IFE [B], -1
        SET PC, .check_free
    ADD B, [B + 1]
    ADD B, 2
    IFE B, 0
        SET PC, .none_found
    SET PC, .loop
.none_found:
    SET A, -1
    SET PC, POP
.check_free:
    ADD B, 1
    IFL A, [B]
        SET PC, .do_allocate
    ADD B, [B]
    ADD B, 1
    IFE B, 0
        SET PC, .none_found
    SET PC, .loop
.do_allocate:
    ; thread_id:length:data:header
    ; A is amount to allocate
    ; B is at length
    SET C, [B]
    SUB C, A ; Set C to updated length of remaining free section
    SUB C, 3 ; Remove new header from free length
    SET [B], A ; Set selected section's length
    SET [B + 0xFFFF], [current_thread_id] ; Set selected section's thread ID
    ADD B, 1
    SET PUSH, B ; PUSH the return value (the first byte of the new section)
        ADD B, [B + 0xFFFF] ; Move B to the end of the allocated section
        SET [B], PEEK ; Write the header address
        SUB [B], 2 ; Adjust the written value
        IFL C, 3
            SET PC, .finish_gapless ; If the remaining space is too small, fill it in
        ADD B, 1
        SET [B], -1 ; Set the free section's ID
        SET [B + 1], C ; SET the free section's length
        SET PUSH, B ; PUSH the free section header pointer
        ADD B, [B + 1] ; Move to free section footer
        ADD B, 2
        SET [B], POP ; Write header address
.finish:
    SET A, POP
    SET PC, POP
.finish_gapless:
    ADD B, C
    SET [B], PEEK
    SET B, PEEK
    ADD [B + 1], C
    SET A, POP
    SET PC, POP