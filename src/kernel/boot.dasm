; 0x42c-kernel boot.dasm
; April 24th, 2012
; Licensed with the MIT license.
; Boots up the device and passes control to the OS.

kernel_reboot:
kernel_start:
    SET SP, kernel_temp_mem_end
    
    JSR kernel_format_userspace
    JSR configure_system_clock
    
inf_loop:
    SET PC, inf_loop
    
; Identifies supported clock hardware and configures it
configure_system_clock:
    SET PUSH, X
    SET PUSH, Y
    
    HWN B
    SUB B, 1
.loop:
    IFE B, -1
        SUB PC, 1 ; No clock connected means 0x42c-kernel cannot work, so we just crash forever
    SET PUSH, B
        HWQ B
        SET C, clock_driver_table
.search_drivers:
        IFE [C], B
            IFE [C + 1], A
                SET PC, .device_found
        ADD C, 3
        IFN C, clock_driver_table_end
           SET PC, .search_drivers 
    SET B, POP
    SUB B, 1
    SET PC, .loop
    
.device_found:
    SET B, POP
    SET [system_clock], B
    ADD C, 2
    JSR [C]
    SET Y, POP
    SET X, POP
    SET PC, POP
    
; A table of supported clock devices
clock_driver_table:
    .dat 0x12D0, 0xB402, configure_generic_clock
clock_driver_table_end:

; All clock drivers configure the clock to fire interrupts
; as close to 30 Hz as possible
.equ clock_frequency 30
configure_generic_clock:
    SET A, 0
    SET B, 60 / clock_frequency
    HWI [system_clock] ; Set frequency
    SET A, 2
    SET B, [system_clock]
    HWI [system_clock] ; Set interrupt
    SET PC, POP
    