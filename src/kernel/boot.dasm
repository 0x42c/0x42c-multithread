; 0x42c-kernel boot.dasm
; April 24th, 2012
; Licensed with the MIT license.
; Boots up the device and passes control to the OS.

kernel_reboot:
kernel_start:
    ; Initialize the temporary boot stack
    SET SP, userspace_memory_end - 2 ; A and PC, theoritically

    ; Initialize basic hardware
    
    ; Search for a compatible clock
    SET A, clock_driver_table
    SET B, clock_driver_table_end
    JSR kernel_locate_device
    
    IFE A, -1
    	SET PC, clock_not_found
    SET PC, clock_found
    
clock_not_found:
    ; TODO: attempt to locate display and show a message
    SET PC, clock_not_found
    
clock_found:
    SET [base_hw_clock], A
    JSR B ; Run initialization for the selected clock driver
    
    ; Format memory
    JSR kernel_set_initial_blocks
    
    ; Load up OS bootloader
    ; TODO: Write custom tool to patch bootloader in seperately
    SET I, [os_bootloader] ; stack size
    ADD I, min_proc_stack
    SET A, I
    SET B, [current_thread_id]
    ;JSR kernel_malloc
    ADD I, [os_bootloader]
    ; I is SP for bootloader
    
    ; TODO: Start bootloader process
    
    ; Start interrupts and pass control to bootloader
    SET A, [base_hw_clock]
    SET PC, kernel_interrupt

:end
    SET PC, end
    
; Special drivers for setting up the clock.  These mini-drivers initialize the clock hardware to send interrupts that work with our interrupt system.
clock_driver_table:
    .dw 0x12d0, 0xb402, clock_driver_generic
clock_driver_table_end:
    
clock_driver_generic:
    SET A, 0 ; Set clock speed
    SET B, interrupts_frequency ; 60 Hz
    HWI [base_hw_clock]
    SET B, [base_hw_clock] ; Use device number for message
    SET A, 2 ; Enable interrupts
    HWI [base_hw_clock]
    SET PC, POP
