; 0x42c-kernel boot.dcpu
; April 24th, 2012
; Licensed with the MIT license.
; Boots up the device and passes control to the OS.

kernel_reboot:
kernel_start:
    ; Initialize the temporary boot stack
    SET SP, userspace_memory_end - 2 ; A and PC, theoritically

    ; Initialize basic hardware
    
    ; Search for a compatible clock
    HWN A
    SET [enumerate_hardware + 3], A ; SMC (fix when compressed literals are supported)
    SET I, -1 ; I is the hardware number being checked
enumerate_hardware:
    ADD I, 1
    IFE I, 0xFFFF ; Changes to number of connected devices.  If we've checked all connected devices...
    SET PC, enumerate_hardware_nonefound ; ...then we didn't find a clock.
    SET J, clock_driver_table
hw_searchloop: ; Search the clock driver table for a compatible driver
    IFE J, clock_driver_table_end ; If we've reached the end of the driver table without finding a match...
    SET PC, enumerate_hardware ; ...then move on to the next hardware index
    HWQ I ; Get hardware info for this device
    IFN A, [J] ; compare it to the current driver's ID
    IFN B, [J + 1]
    SET PC, hw_searchloop_continue
    ; Compatible driver found
    SET PC, clock_found
    
hw_searchloop_continue:
    ADD J, 2
    SET PC, hw_searchloop
    
enumerate_hardware_nonefound:
    ; TODO: attempt to locate display and show a message
    SET PC, $
    
clock_found:
    SET [base_hw_clock], I
    JSR J ; Run initialization for the selected clock driver
    
    ; Format memory
    JSR kernel_set_initial_blocks
    
    ; Load up OS bootloader
    ; TODO: Write custom tool to patch bootloader in seperately
    SET I, [os_bootloader] ; stack size
    ADD I, min_proc_stack
    SET A, I
    SET B, [current_thread_id]
    ;JSR kernel_malloc
    ADD I, [os_bootloader]
    ; I is SP for bootloader
    
    ; TODO: Start bootloader process
    
    ; Start interrupts and pass control to bootloader
    SET A, [base_hw_clock]
    SET PC, kernel_interrupt

:end
    SET PC, end
    
    ; TODO: move this to the other side of the table when forward references work
clock_driver_generic:
    SET A, 0 ; Set clock speed
    SET B, interrupts_frequency ; 60 Hz
    HWI [base_hw_clock]
    SET B, [base_hw_clock] ; Use device number for message
    SET A, 2 ; Enable interrupts
    HWI [base_hw_clock]
    SET PC, POP
    
clock_driver_table: ; Special drivers for setting up the clock.  These mini-drivers initialize the clock hardware to send interrupts that work with our interrupt system.
    .dw 0x12d0, 0xb402, clock_driver_generic
clock_driver_table_end:
